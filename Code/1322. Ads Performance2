Q:

(Create table If Not Exists Ads (ad_id INT, user_id int, action char(200));
Truncate table Ads;
insert into Ads (ad_id, user_id, action) values (1, '1', 'Clicked');
insert into Ads (ad_id, user_id, action) values (2, '2', 'Clicked');
insert into Ads (ad_id, user_id, action) values (3, '3', 'Viewed');
insert into Ads (ad_id, user_id, action) values (5, '5', 'Ignored');
insert into Ads (ad_id, user_id, action) values (1, '7', 'Ignored');
insert into Ads (ad_id, user_id, action) values (2, '7', 'Viewed');
insert into Ads (ad_id, user_id, action) values (3, '5', 'Clicked');
insert into Ads (ad_id, user_id, action) values (1, '4', 'Viewed');
insert into Ads (ad_id, user_id, action) values (2, '11', 'Viewed');
insert into Ads (ad_id, user_id, action) values (1, '2', 'Clicked');
)

Table: Ads

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| ad_id         | int     |
| user_id       | int     |
| action        | enum    |
+---------------+---------+
(ad_id, user_id) is the primary key for this table.
Each row of this table contains the ID of an Ad, the ID of a user and the action taken by this user regarding this Ad.
The action column is an ENUM type of ('Clicked', 'Viewed', 'Ignored').
 

A company is running Ads and wants to calculate the performance of each Ad.

Performance of the Ad is measured using Click-Through Rate (CTR) where:

CTR = 0, if Ad total clicks and Ad total views = 0; Ad total clicks/(Ad total clicks + Ad total views), otherwises

Write an SQL query to find the ctr of each Ad.

Round ctr to 2 decimal points. Order the result table by ctr in descending order and by ad_id in ascending order in case of a tie.

The query result format is in the following example:

Ads table:
+-------+---------+---------+
| ad_id | user_id | action  |
+-------+---------+---------+
| 1     | 1       | Clicked |
| 2     | 2       | Clicked |
| 3     | 3       | Viewed  |
| 5     | 5       | Ignored |
| 1     | 7       | Ignored |
| 2     | 7       | Viewed  |
| 3     | 5       | Clicked |
| 1     | 4       | Viewed  |
| 2     | 11      | Viewed  |
| 1     | 2       | Clicked |
+-------+---------+---------+
Result table:
+-------+-------+
| ad_id | ctr   |
+-------+-------+
| 1     | 66.67 |
| 3     | 50.00 |
| 2     | 33.33 |
| 5     | 0.00  |
+-------+-------+
for ad_id = 1, ctr = (2/(2+1)) * 100 = 66.67
for ad_id = 2, ctr = (1/(1+2)) * 100 = 33.33
for ad_id = 3, ctr = (1/(1+1)) * 100 = 50.00
for ad_id = 5, ctr = 0.00, Note that ad_id = 5 has no clicks or views.
Note that we don't care about Ignored Ads.
Result table is ordered by the ctr. in case of a tie we order them by ad_id

A:

select t1.ad_id, ifnull(round(100*t2.cli_count/(t2.cli_count + t3.view_count),2), 0) as ctr 
from
(select distinct ad_id from ads group by ad_id) t1
left join 
(select ad_id, count(action) as cli_count from ads where action='clicked' group by ad_id) t2
on t2.ad_id = t1.ad_id
left join 
(select ad_id, count(action) as view_count from ads where action='viewed' group by ad_id) t3
on t3.ad_id = t1.ad_id
order by ctr desc;

or

SELECT ad_id,IFNULL(ROUND(SUM(action = 'Clicked')/(SUM(action = 'Clicked')+SUM(action = 'Viewed'))*100,2),0) AS ctr
FROM Ads
GROUP BY ad_id
order by ctr desc;
