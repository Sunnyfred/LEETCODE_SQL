Q:

(create table Failed
(
  fail_date date
);

insert into Failed values('2018-12-28');
insert into Failed values('2018-12-29');
insert into Failed values('2019-01-04');
insert into Failed values('2019-01-05');

create table Succeeded
(
  success_date date
);

insert into Succeeded values('2018-12-30');
insert into Succeeded values('2018-12-31');
insert into Succeeded values('2019-01-01');
insert into Succeeded values('2019-01-02');
insert into Succeeded values('2019-01-03');
insert into Succeeded values('2019-01-06');

)

Table: Failed

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| fail_date    | date    |
+--------------+---------+
Primary key for this table is fail_date.
Failed table contains the days of failed tasks.
Table: Succeeded

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| success_date | date    |
+--------------+---------+
Primary key for this table is success_date.
Succeeded table contains the days of succeeded tasks.
 

A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.

period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

Order result by start_date.

The query result format is in the following example:

Failed table:
+-------------------+
| fail_date         |
+-------------------+
| 2018-12-28        |
| 2018-12-29        |
| 2019-01-04        |
| 2019-01-05        |
+-------------------+

Succeeded table:
+-------------------+
| success_date      |
+-------------------+
| 2018-12-30        |
| 2018-12-31        |
| 2019-01-01        |
| 2019-01-02        |
| 2019-01-03        |
| 2019-01-06        |
+-------------------+


Result table:
+--------------+--------------+--------------+
| period_state | start date   | end date     |
+--------------+--------------+--------------+
| succeeded    | 2019-01-01   | 2019-01-03   |
| failed       | 2019-01-04   | 2019-01-05   |
| succeeded    | 2019-01-06   | 2019-01-06   |
+--------------+--------------+--------------+

The report ignored the system state in 2018 as we care about the system in the period 2019-01-01 to 2019-12-31.
From 2019-01-01 to 2019-01-03 all tasks succeeded and the system state was "succeeded".
From 2019-01-04 to 2019-01-05 all tasks failed and system state was "failed".
From 2019-01-06 to 2019-01-06 all tasks succeeded and system state was "succeeded".


A:

set @previous_state := null; /* set value: @a := 1, logic operation: @a = 1  */
set @tmp := 0;

select f.period_state, min(f.date) as 'start date', max(f.date) as 'end date'
from
(
  select period_state, date,
  if(@previous_state = period_state, @tmp := @tmp, @tmp := @tmp + 1) as rank,
  (@previous_state := period_state) as prevs
  from 
  (
  select * 
    from
    (
      select 'Succeeded' as period_state, success_date as date
      from Succeeded
      where success_date between '2019-01-01' and '2019-12-31'
      union
      select 'Failed' as period_state, fail_date as date
      from Failed
      where fail_date between '2019-01-01' and '2019-12-31'
    ) tmp0
    order by date
  ) tmp1
) f
group by f.rank
