Q:

(drop table if exists salary;
drop table if exists employee;
 
Create table If Not Exists salary (
    id int, 
    employee_id int, 
    amount int, 
    pay_date date);
Create table If Not Exists employee (
    employee_id int, 
    department_id int);
 
Truncate table salary;
insert into salary 
    (id, employee_id, amount, pay_date) 
values
    ('1', '1', '9000', '2017/03/31');
insert into salary 
    (id, employee_id, amount, pay_date) 
values
    ('2', '2', '6000', '2017/03/31');
insert into salary 
    (id, employee_id, amount, pay_date) 
values
    ('3', '3', '10000', '2017/03/31');
insert into salary 
    (id, employee_id, amount, pay_date) 
values
    ('4', '1', '7000', '2017/02/28');
insert into salary 
    (id, employee_id, amount, pay_date) 
values
    ('5', '2', '6000', '2017/02/28');
insert into salary 
    (id, employee_id, amount, pay_date) 
values    
    ('6', '3', '8000', '2017/02/28');
 
Truncate table employee;
insert into employee 
    (employee_id, department_id) 
values
    ('1', '1');
insert into employee 
    (employee_id, department_id) 
values
    ('2', '2');
insert into employee 
    (employee_id, department_id) 
values
    ('3', '2');)

Given two tables as below, write a query to display the comparison result (higher/lower/same) of the average salary of employees in a department to the company’s average salary.
Table: salary
id	     employee_id	     amount	     pay_date
1	       1	               9000	       2017-03-31
2	       2	               6000	       2017-03-31
3	       3	               10000       2017-03-31
4	       1	               7000	       2017-02-28
5	       2	               6000	       2017-02-28
6	       3	               8000	       2017-02-28

The employee_id column refers to the employee_id in the following table employee.

employee_id     	department_id
1	                1
2	                2
3	                2

So for the sample data above, the result is:

pay_month     	department_id     	comparison
2017-03	        1	                  higher
2017-03	        2	                  lower
2017-02	        1	                  same
2017-02	        2	                  same

Explanation

In March, the company’s average salary is (9000+6000+10000)/3 = 8333.33…

The average salary for department ‘1’ is 9000, which is the salary of employee_id ‘1’ since there is only one employee in this department. So the comparison result is ‘higher’ since 9000 > 8333.33 obviously.

The average salary of department ‘2’ is (6000 + 10000)/2 = 8000, which is the average of employee_id ‘2’ and ‘3’. So the comparison result is ‘lower’ since 8000 < 8333.33.

With the same formula for the average salary comparison in February, the result is ‘same’ since both the department ‘1’ and ‘2’ have the same average salary with the company, which is 7000.





A:


SELECT date_format(f.pay_date, '%Y-%m') as pay_month, f.department_id, 
case 
when d_avg > d_mean then 'higher'
when d_avg < d_mean then 'lower'
else 'same' end comparison
from 
(
select s1.pay_date, e1.department_id, avg(s1.amount) as d_avg, d_mean from employee e1 
join salary s1 on s1.employee_id = e1.employee_id
join (select s2.pay_date, avg(s2.amount) as d_mean from salary s2 group by s2.pay_date) d on d.pay_date = s1.pay_date
group by s1.pay_date, e1.department_id
) f
order by pay_month desc, f.department_id, comparison
